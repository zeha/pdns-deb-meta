#!/bin/bash
set -ex

if [[ "${JOB_NAME}" == pdns-recursor* ]]; then
  UPSTREAM_JOB="recursor-git"
  UPSTREAM_SOURCE_SUBDIR="pdns/"
  PKG_NAME="pdns-recursor"
  PKG_DIR="pkg-pdns-recursor"
  TAR_FORMAT="tar.bz2"
  get_version() {
    grep VERSION ${PKG_NAME}/config.h | awk '{print $3}' | sed -e 's/"//g'
  }
else
  UPSTREAM_JOB="auth-git"
  UPSTREAM_SOURCE_SUBDIR=""
  PKG_NAME="pdns"
  PKG_DIR="pkg-pdns"
  TAR_FORMAT="tar.bz2"
  get_version() {
    dpkg-parsechangelog -l${PKG_NAME}/debian-pdns/changelog | awk '/^Version/{print $2}' | sed -e 's/-1$//'
  }
fi

download_source() {
  PDNS_BUILD_ID="${PDNS_BUILD_ID:-lastSuccessfulBuild}"
  local REMOTE="https://autotest.powerdns.com/job/${UPSTREAM_JOB}/${PDNS_BUILD_ID}"
  local FILES=$(curl -sk $REMOTE/api/json | python -c "import json, sys; atfcs = json.loads(sys.stdin.read())['artifacts']; print '\n'.join(sorted(set([atfc['relativePath'] for atfc in atfcs])))")
  local f
  for f in $FILES; do
    fn=$(basename $f)
    if [[ $fn == pdns*.tar* ]] ; then
      curl -kO "$REMOTE/artifact/${UPSTREAM_SOURCE_SUBDIR}$fn"
      break
    fi
  done
}

git clean -fdx
git submodule update --remote

download_source

rm -rf ${PKG_NAME} && mkdir ${PKG_NAME}
tar -C ${PKG_NAME} -xf $fn --strip-components=1

# copy the 'good' packaging files over
rsync -ravH --delete ${PKG_DIR}/debian/ ${PKG_NAME}/debian/

# no git-buildpackage here
rm -f debian/gbp.conf

UPSTREAM_VERSION=$(get_version)
# Mangle the upstream version into an acceptable format (needs to start with a digit)
if [ -z "$(echo ${UPSTREAM_VERSION} | egrep '^[0-9]')" ]; then
  UPSTREAM_VERSION="0.0-${UPSTREAM_VERSION}"
fi

# fix our changelog
cat >${PKG_NAME}/debian/changelog <<EOT
${PKG_NAME} (${UPSTREAM_VERSION}-0+autotest) autotest; urgency=medium

  * Automated build based on upstream version ${UPSTREAM_VERSION}.

 -- Namespace Autobuild <inhuman@namespace.at>  $(date --rfc-2822)
EOT

# assume we don't need any patches
echo>${PKG_NAME}/debian/patches/series

# make an orig.tgz
ln -s $fn ${PKG_NAME}_${UPSTREAM_VERSION}.orig.${TAR_FORMAT}

# go build debian sources
dpkg-source -i -I -b ${PKG_NAME}

